// src/utils/migrateToFirestore.js - Script de Migraci√≥n de localStorage a Firestore
import { collection, addDoc, getDocs, query, where, writeBatch } from 'firebase/firestore'
import { db } from '../lib/firebase'
import { logger } from './logger'

/**
 * Migrar c√≥digos de localStorage a Firestore
 */
export async function migrateCodesToFirestore() {
  try {
    console.log('üîÑ Iniciando migraci√≥n de c√≥digos...')
    
    // Obtener c√≥digos de localStorage
    const codesData = localStorage.getItem('proconing_codes')
    const usedCodesData = localStorage.getItem('proconing_used_codes')
    
    if (!codesData) {
      console.log('‚úÖ No hay c√≥digos en localStorage para migrar')
      return { success: true, migrated: 0, message: 'No hay c√≥digos para migrar' }
    }
    
    const codes = JSON.parse(codesData)
    const usedCodes = JSON.parse(usedCodesData || '[]')
    
    console.log(`üì¶ Encontrados ${codes.length} c√≥digos en localStorage`)
    
    // Verificar c√≥digos existentes en Firestore
    const codesRef = collection(db, 'codes')
    const existingSnapshot = await getDocs(codesRef)
    const existingCodes = existingSnapshot.docs.map(doc => doc.data().code)
    
    console.log(`üìä C√≥digos existentes en Firestore: ${existingCodes.length}`)
    
    // Usar batch para operaciones m√∫ltiples
    const batch = writeBatch(db)
    let migratedCount = 0
    
    for (const codeData of codes) {
      // Verificar si el c√≥digo ya existe
      if (existingCodes.includes(codeData.code)) {
        console.log(`‚è≠Ô∏è  C√≥digo ${codeData.code} ya existe, saltando...`)
        continue
      }
      
      // Preparar datos del c√≥digo
      const firestoreCode = {
        code: codeData.code,
        clientName: codeData.clientName || 'Sin nombre',
        used: usedCodes.includes(codeData.code),
        createdAt: new Date(codeData.createdAt),
        usedAt: usedCodes.includes(codeData.code) ? new Date() : null
      }
      
      // Agregar al batch
      const newCodeRef = collection(db, 'codes')
      const docRef = await addDoc(newCodeRef, firestoreCode)
      migratedCount++
      
      console.log(`‚úÖ Migrado: ${codeData.code}`)
    }
    
    console.log(`‚ú® Migraci√≥n completada: ${migratedCount} c√≥digos migrados`)
    
    return {
      success: true,
      migrated: migratedCount,
      total: codes.length,
      message: `${migratedCount} de ${codes.length} c√≥digos migrados exitosamente`
    }
  } catch (error) {
    logger.error('Error en migraci√≥n de c√≥digos', error)
    console.error('‚ùå Error:', error)
    throw error
  }
}

/**
 * Migrar rese√±as de localStorage a Firestore
 */
export async function migrateReviewsToFirestore() {
  try {
    console.log('üîÑ Iniciando migraci√≥n de rese√±as...')
    
    // Obtener rese√±as de localStorage
    const reviewsData = localStorage.getItem('proconing_reviews')
    
    if (!reviewsData) {
      console.log('‚úÖ No hay rese√±as en localStorage para migrar')
      return { success: true, migrated: 0, message: 'No hay rese√±as para migrar' }
    }
    
    const reviews = JSON.parse(reviewsData)
    
    console.log(`üì¶ Encontradas ${reviews.length} rese√±as en localStorage`)
    
    // Verificar rese√±as existentes en Firestore
    const reviewsRef = collection(db, 'reviews')
    const existingSnapshot = await getDocs(reviewsRef)
    const existingCodes = existingSnapshot.docs.map(doc => doc.data().code)
    
    console.log(`üìä Rese√±as existentes en Firestore: ${existingCodes.length}`)
    
    let migratedCount = 0
    
    for (const reviewData of reviews) {
      // Verificar si la rese√±a ya existe (por c√≥digo)
      if (existingCodes.includes(reviewData.code)) {
        console.log(`‚è≠Ô∏è  Rese√±a con c√≥digo ${reviewData.code} ya existe, saltando...`)
        continue
      }
      
      // Preparar datos de la rese√±a
      const firestoreReview = {
        name: reviewData.name,
        rating: reviewData.rating,
        comment: reviewData.comment,
        project: reviewData.project || '',
        code: reviewData.code,
        createdAt: new Date(reviewData.date),
        updatedAt: new Date(reviewData.date)
      }
      
      // Agregar a Firestore
      await addDoc(reviewsRef, firestoreReview)
      migratedCount++
      
      console.log(`‚úÖ Migrado: ${reviewData.name} (${reviewData.code})`)
    }
    
    console.log(`‚ú® Migraci√≥n completada: ${migratedCount} rese√±as migradas`)
    
    return {
      success: true,
      migrated: migratedCount,
      total: reviews.length,
      message: `${migratedCount} de ${reviews.length} rese√±as migradas exitosamente`
    }
  } catch (error) {
    logger.error('Error en migraci√≥n de rese√±as', error)
    console.error('‚ùå Error:', error)
    throw error
  }
}

/**
 * Migrar todos los datos (c√≥digos y rese√±as)
 */
export async function migrateAllData() {
  try {
    console.log('üöÄ Iniciando migraci√≥n completa de datos...')
    console.log('=' .repeat(50))
    
    // Confirmar migraci√≥n
    const confirmed = window.confirm(
      '¬øDeseas migrar todos los datos de localStorage a Firestore?\n\n' +
      '‚ö†Ô∏è IMPORTANTE:\n' +
      '- Esta operaci√≥n puede tardar varios minutos\n' +
      '- No cierres el navegador durante el proceso\n' +
      '- Los datos de localStorage se mantendr√°n intactos\n\n' +
      '¬øContinuar?'
    )
    
    if (!confirmed) {
      console.log('‚ùå Migraci√≥n cancelada por el usuario')
      return { success: false, message: 'Migraci√≥n cancelada' }
    }
    
    // Migrar c√≥digos
    const codesResult = await migrateCodesToFirestore()
    console.log('\n')
    
    // Migrar rese√±as
    const reviewsResult = await migrateReviewsToFirestore()
    console.log('\n')
    
    console.log('=' .repeat(50))
    console.log('üéâ MIGRACI√ìN COMPLETA')
    console.log('=' .repeat(50))
    console.log(`C√≥digos: ${codesResult.migrated}/${codesResult.total}`)
    console.log(`Rese√±as: ${reviewsResult.migrated}/${reviewsResult.total}`)
    
    // Mostrar resumen
    alert(
      '‚úÖ Migraci√≥n completada exitosamente!\n\n' +
      `C√≥digos migrados: ${codesResult.migrated}/${codesResult.total}\n` +
      `Rese√±as migradas: ${reviewsResult.migrated}/${reviewsResult.total}\n\n` +
      'Ahora puedes usar Firestore como base de datos.'
    )
    
    return {
      success: true,
      codes: codesResult,
      reviews: reviewsResult,
      message: 'Migraci√≥n completada exitosamente'
    }
  } catch (error) {
    logger.error('Error en migraci√≥n completa', error)
    console.error('‚ùå Error cr√≠tico en migraci√≥n:', error)
    
    alert(
      '‚ùå Error durante la migraci√≥n\n\n' +
      'Por favor, verifica:\n' +
      '1. Conexi√≥n a internet\n' +
      '2. Configuraci√≥n de Firebase\n' +
      '3. Consola del navegador para m√°s detalles'
    )
    
    throw error
  }
}

/**
 * Verificar si hay datos para migrar
 */
export function checkMigrationNeeded() {
  const hasLocalCodes = localStorage.getItem('proconing_codes')
  const hasLocalReviews = localStorage.getItem('proconing_reviews')
  
  return {
    needed: !!(hasLocalCodes || hasLocalReviews),
    hasCodes: !!hasLocalCodes,
    hasReviews: !!hasLocalReviews,
    codesCount: hasLocalCodes ? JSON.parse(hasLocalCodes).length : 0,
    reviewsCount: hasLocalReviews ? JSON.parse(hasLocalReviews).length : 0
  }
}

/**
 * Limpiar localStorage despu√©s de migraci√≥n exitosa
 */
export function cleanupLocalStorage() {
  const confirmed = window.confirm(
    '‚ö†Ô∏è ¬øEst√°s seguro de eliminar los datos de localStorage?\n\n' +
    'Esta acci√≥n NO se puede deshacer.\n' +
    'Aseg√∫rate de que la migraci√≥n a Firestore fue exitosa.\n\n' +
    '¬øContinuar?'
  )
  
  if (!confirmed) {
    console.log('‚ùå Limpieza cancelada')
    return false
  }
  
  try {
    localStorage.removeItem('proconing_codes')
    localStorage.removeItem('proconing_reviews')
    localStorage.removeItem('proconing_used_codes')
    
    console.log('‚úÖ LocalStorage limpiado correctamente')
    
    alert('‚úÖ Datos de localStorage eliminados correctamente')
    
    return true
  } catch (error) {
    logger.error('Error limpiando localStorage', error)
    console.error('‚ùå Error:', error)
    return false
  }
}

// Exportar para uso en consola del navegador
if (typeof window !== 'undefined') {
  window.ProconMigration = {
    migrateCodes: migrateCodesToFirestore,
    migrateReviews: migrateReviewsToFirestore,
    migrateAll: migrateAllData,
    checkNeeded: checkMigrationNeeded,
    cleanup: cleanupLocalStorage
  }
  
  // Verificar si hay migraci√≥n pendiente al cargar
  const migrationCheck = checkMigrationNeeded()
  if (migrationCheck.needed) {
    console.log('%c ‚ö†Ô∏è MIGRACI√ìN PENDIENTE ', 'background: #f59e0b; color: white; padding: 8px 16px; font-size: 14px; font-weight: bold;')
    console.log(`üì¶ Datos encontrados en localStorage:`)
    console.log(`   - C√≥digos: ${migrationCheck.codesCount}`)
    console.log(`   - Rese√±as: ${migrationCheck.reviewsCount}`)
    console.log('\nüí° Para migrar tus datos a Firestore, ejecuta:')
    console.log('   window.ProconMigration.migrateAll()')
    console.log('\nüìö M√°s informaci√≥n:')
    console.log('   - Ver datos pendientes: window.ProconMigration.checkNeeded()')
    console.log('   - Migrar solo c√≥digos: window.ProconMigration.migrateCodes()')
    console.log('   - Migrar solo rese√±as: window.ProconMigration.migrateReviews()')
    console.log('   - Limpiar localStorage: window.ProconMigration.cleanup()')
  }
}

export default {
  migrateCodesToFirestore,
  migrateReviewsToFirestore,
  migrateAllData,
  checkMigrationNeeded,
  cleanupLocalStorage
}